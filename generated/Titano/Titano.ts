// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogRebase extends ethereum.Event {
  get params(): LogRebase__Params {
    return new LogRebase__Params(this);
  }
}

export class LogRebase__Params {
  _event: LogRebase;

  constructor(event: LogRebase) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalSupply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MinterAdded extends ethereum.Event {
  get params(): MinterAdded__Params {
    return new MinterAdded__Params(this);
  }
}

export class MinterAdded__Params {
  _event: MinterAdded;

  constructor(event: MinterAdded) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MinterRemoved extends ethereum.Event {
  get params(): MinterRemoved__Params {
    return new MinterRemoved__Params(this);
  }
}

export class MinterRemoved__Params {
  _event: MinterRemoved;

  constructor(event: MinterRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipRenounced extends ethereum.Event {
  get params(): OwnershipRenounced__Params {
    return new OwnershipRenounced__Params(this);
  }
}

export class OwnershipRenounced__Params {
  _event: OwnershipRenounced;

  constructor(event: OwnershipRenounced) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Titano extends ethereum.SmartContract {
  static bind(address: Address): Titano {
    return new Titano("Titano", address);
  }

  RiskFreeValue(): BigInt {
    let result = super.call("RiskFreeValue", "RiskFreeValue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_RiskFreeValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "RiskFreeValue",
      "RiskFreeValue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  RiskFreeValueReceiver(): Address {
    let result = super.call(
      "RiskFreeValueReceiver",
      "RiskFreeValueReceiver():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_RiskFreeValueReceiver(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "RiskFreeValueReceiver",
      "RiskFreeValueReceiver():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  Treasury(): BigInt {
    let result = super.call("Treasury", "Treasury():(uint256)", []);

    return result[0].toBigInt();
  }

  try_Treasury(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("Treasury", "Treasury():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TreasuryReceiver(): Address {
    let result = super.call(
      "TreasuryReceiver",
      "TreasuryReceiver():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_TreasuryReceiver(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "TreasuryReceiver",
      "TreasuryReceiver():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner_: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner_), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    owner_: Address,
    spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner_), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  autoLiquidityReceiver(): Address {
    let result = super.call(
      "autoLiquidityReceiver",
      "autoLiquidityReceiver():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_autoLiquidityReceiver(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "autoLiquidityReceiver",
      "autoLiquidityReceiver():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(who: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(who)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(who: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(who)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blacklist(param0: Address): boolean {
    let result = super.call("blacklist", "blacklist(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_blacklist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("blacklist", "blacklist(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkFeeExempt(_addr: Address): boolean {
    let result = super.call(
      "checkFeeExempt",
      "checkFeeExempt(address):(bool)",
      [ethereum.Value.fromAddress(_addr)]
    );

    return result[0].toBoolean();
  }

  try_checkFeeExempt(_addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkFeeExempt",
      "checkFeeExempt(address):(bool)",
      [ethereum.Value.fromAddress(_addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkSwapThreshold(): BigInt {
    let result = super.call(
      "checkSwapThreshold",
      "checkSwapThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_checkSwapThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkSwapThreshold",
      "checkSwapThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  feeDenominator(): BigInt {
    let result = super.call("feeDenominator", "feeDenominator():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeDenominator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeDenominator",
      "feeDenominator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCirculatingSupply(): BigInt {
    let result = super.call(
      "getCirculatingSupply",
      "getCirculatingSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCirculatingSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCirculatingSupply",
      "getCirculatingSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLiquidityBacking(accuracy: BigInt): BigInt {
    let result = super.call(
      "getLiquidityBacking",
      "getLiquidityBacking(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(accuracy)]
    );

    return result[0].toBigInt();
  }

  try_getLiquidityBacking(accuracy: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLiquidityBacking",
      "getLiquidityBacking(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(accuracy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  initialDistributionFinished(): boolean {
    let result = super.call(
      "initialDistributionFinished",
      "initialDistributionFinished():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_initialDistributionFinished(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "initialDistributionFinished",
      "initialDistributionFinished():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMinter(account: Address): boolean {
    let result = super.call("isMinter", "isMinter(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isMinter(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMinter", "isMinter(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isNotInSwap(): boolean {
    let result = super.call("isNotInSwap", "isNotInSwap():(bool)", []);

    return result[0].toBoolean();
  }

  try_isNotInSwap(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isNotInSwap", "isNotInSwap():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOverLiquified(target: BigInt, accuracy: BigInt): boolean {
    let result = super.call(
      "isOverLiquified",
      "isOverLiquified(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(target),
        ethereum.Value.fromUnsignedBigInt(accuracy)
      ]
    );

    return result[0].toBoolean();
  }

  try_isOverLiquified(
    target: BigInt,
    accuracy: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOverLiquified",
      "isOverLiquified(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(target),
        ethereum.Value.fromUnsignedBigInt(accuracy)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidityFee(): BigInt {
    let result = super.call("liquidityFee", "liquidityFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_liquidityFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("liquidityFee", "liquidityFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pair(): Address {
    let result = super.call("pair", "pair():(address)", []);

    return result[0].toAddress();
  }

  try_pair(): ethereum.CallResult<Address> {
    let result = super.tryCall("pair", "pair():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pairContract(): Address {
    let result = super.call("pairContract", "pairContract():(address)", []);

    return result[0].toAddress();
  }

  try_pairContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("pairContract", "pairContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rebase(epoch: BigInt, supplyDelta: BigInt): BigInt {
    let result = super.call("rebase", "rebase(uint256,int256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(epoch),
      ethereum.Value.fromSignedBigInt(supplyDelta)
    ]);

    return result[0].toBigInt();
  }

  try_rebase(epoch: BigInt, supplyDelta: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rebase", "rebase(uint256,int256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(epoch),
      ethereum.Value.fromSignedBigInt(supplyDelta)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rescueToken(tokenAddress: Address, tokens: BigInt): boolean {
    let result = super.call(
      "rescueToken",
      "rescueToken(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokens)
      ]
    );

    return result[0].toBoolean();
  }

  try_rescueToken(
    tokenAddress: Address,
    tokens: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "rescueToken",
      "rescueToken(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  router(): Address {
    let result = super.call("router", "router():(address)", []);

    return result[0].toAddress();
  }

  try_router(): ethereum.CallResult<Address> {
    let result = super.tryCall("router", "router():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sellFee(): BigInt {
    let result = super.call("sellFee", "sellFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_sellFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sellFee", "sellFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapEnabled(): boolean {
    let result = super.call("swapEnabled", "swapEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_swapEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("swapEnabled", "swapEnabled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalFee(): BigInt {
    let result = super.call("totalFee", "totalFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalFee", "totalFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddMinterCall extends ethereum.Call {
  get inputs(): AddMinterCall__Inputs {
    return new AddMinterCall__Inputs(this);
  }

  get outputs(): AddMinterCall__Outputs {
    return new AddMinterCall__Outputs(this);
  }
}

export class AddMinterCall__Inputs {
  _call: AddMinterCall;

  constructor(call: AddMinterCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddMinterCall__Outputs {
  _call: AddMinterCall;

  constructor(call: AddMinterCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClearStuckBalanceCall extends ethereum.Call {
  get inputs(): ClearStuckBalanceCall__Inputs {
    return new ClearStuckBalanceCall__Inputs(this);
  }

  get outputs(): ClearStuckBalanceCall__Outputs {
    return new ClearStuckBalanceCall__Outputs(this);
  }
}

export class ClearStuckBalanceCall__Inputs {
  _call: ClearStuckBalanceCall;

  constructor(call: ClearStuckBalanceCall) {
    this._call = call;
  }

  get amountPercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get adr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClearStuckBalanceCall__Outputs {
  _call: ClearStuckBalanceCall;

  constructor(call: ClearStuckBalanceCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class EnableTransferCall extends ethereum.Call {
  get inputs(): EnableTransferCall__Inputs {
    return new EnableTransferCall__Inputs(this);
  }

  get outputs(): EnableTransferCall__Outputs {
    return new EnableTransferCall__Outputs(this);
  }
}

export class EnableTransferCall__Inputs {
  _call: EnableTransferCall;

  constructor(call: EnableTransferCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EnableTransferCall__Outputs {
  _call: EnableTransferCall;

  constructor(call: EnableTransferCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ManualSyncCall extends ethereum.Call {
  get inputs(): ManualSyncCall__Inputs {
    return new ManualSyncCall__Inputs(this);
  }

  get outputs(): ManualSyncCall__Outputs {
    return new ManualSyncCall__Outputs(this);
  }
}

export class ManualSyncCall__Inputs {
  _call: ManualSyncCall;

  constructor(call: ManualSyncCall) {
    this._call = call;
  }
}

export class ManualSyncCall__Outputs {
  _call: ManualSyncCall;

  constructor(call: ManualSyncCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RebaseCall extends ethereum.Call {
  get inputs(): RebaseCall__Inputs {
    return new RebaseCall__Inputs(this);
  }

  get outputs(): RebaseCall__Outputs {
    return new RebaseCall__Outputs(this);
  }
}

export class RebaseCall__Inputs {
  _call: RebaseCall;

  constructor(call: RebaseCall) {
    this._call = call;
  }

  get epoch(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get supplyDelta(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RebaseCall__Outputs {
  _call: RebaseCall;

  constructor(call: RebaseCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveMinterCall extends ethereum.Call {
  get inputs(): RemoveMinterCall__Inputs {
    return new RemoveMinterCall__Inputs(this);
  }

  get outputs(): RemoveMinterCall__Outputs {
    return new RemoveMinterCall__Outputs(this);
  }
}

export class RemoveMinterCall__Inputs {
  _call: RemoveMinterCall;

  constructor(call: RemoveMinterCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveMinterCall__Outputs {
  _call: RemoveMinterCall;

  constructor(call: RemoveMinterCall) {
    this._call = call;
  }
}

export class RenounceMinterCall extends ethereum.Call {
  get inputs(): RenounceMinterCall__Inputs {
    return new RenounceMinterCall__Inputs(this);
  }

  get outputs(): RenounceMinterCall__Outputs {
    return new RenounceMinterCall__Outputs(this);
  }
}

export class RenounceMinterCall__Inputs {
  _call: RenounceMinterCall;

  constructor(call: RenounceMinterCall) {
    this._call = call;
  }
}

export class RenounceMinterCall__Outputs {
  _call: RenounceMinterCall;

  constructor(call: RenounceMinterCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RescueTokenCall extends ethereum.Call {
  get inputs(): RescueTokenCall__Inputs {
    return new RescueTokenCall__Inputs(this);
  }

  get outputs(): RescueTokenCall__Outputs {
    return new RescueTokenCall__Outputs(this);
  }
}

export class RescueTokenCall__Inputs {
  _call: RescueTokenCall;

  constructor(call: RescueTokenCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RescueTokenCall__Outputs {
  _call: RescueTokenCall;

  constructor(call: RescueTokenCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SendPresaleCall extends ethereum.Call {
  get inputs(): SendPresaleCall__Inputs {
    return new SendPresaleCall__Inputs(this);
  }

  get outputs(): SendPresaleCall__Outputs {
    return new SendPresaleCall__Outputs(this);
  }
}

export class SendPresaleCall__Inputs {
  _call: SendPresaleCall;

  constructor(call: SendPresaleCall) {
    this._call = call;
  }

  get recipients(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class SendPresaleCall__Outputs {
  _call: SendPresaleCall;

  constructor(call: SendPresaleCall) {
    this._call = call;
  }
}

export class SetFeeExemptCall extends ethereum.Call {
  get inputs(): SetFeeExemptCall__Inputs {
    return new SetFeeExemptCall__Inputs(this);
  }

  get outputs(): SetFeeExemptCall__Outputs {
    return new SetFeeExemptCall__Outputs(this);
  }
}

export class SetFeeExemptCall__Inputs {
  _call: SetFeeExemptCall;

  constructor(call: SetFeeExemptCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeExemptCall__Outputs {
  _call: SetFeeExemptCall;

  constructor(call: SetFeeExemptCall) {
    this._call = call;
  }
}

export class SetFeeReceiversCall extends ethereum.Call {
  get inputs(): SetFeeReceiversCall__Inputs {
    return new SetFeeReceiversCall__Inputs(this);
  }

  get outputs(): SetFeeReceiversCall__Outputs {
    return new SetFeeReceiversCall__Outputs(this);
  }
}

export class SetFeeReceiversCall__Inputs {
  _call: SetFeeReceiversCall;

  constructor(call: SetFeeReceiversCall) {
    this._call = call;
  }

  get _autoLiquidityReceiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _TreasuryReceiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _RiskFreeValueReceiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetFeeReceiversCall__Outputs {
  _call: SetFeeReceiversCall;

  constructor(call: SetFeeReceiversCall) {
    this._call = call;
  }
}

export class SetFeesCall extends ethereum.Call {
  get inputs(): SetFeesCall__Inputs {
    return new SetFeesCall__Inputs(this);
  }

  get outputs(): SetFeesCall__Outputs {
    return new SetFeesCall__Outputs(this);
  }
}

export class SetFeesCall__Inputs {
  _call: SetFeesCall;

  constructor(call: SetFeesCall) {
    this._call = call;
  }

  get _liquidityFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _RiskFreeValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _Treasury(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _sellFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _feeDenominator(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SetFeesCall__Outputs {
  _call: SetFeesCall;

  constructor(call: SetFeesCall) {
    this._call = call;
  }
}

export class SetInitialDistributionFinishedCall extends ethereum.Call {
  get inputs(): SetInitialDistributionFinishedCall__Inputs {
    return new SetInitialDistributionFinishedCall__Inputs(this);
  }

  get outputs(): SetInitialDistributionFinishedCall__Outputs {
    return new SetInitialDistributionFinishedCall__Outputs(this);
  }
}

export class SetInitialDistributionFinishedCall__Inputs {
  _call: SetInitialDistributionFinishedCall;

  constructor(call: SetInitialDistributionFinishedCall) {
    this._call = call;
  }
}

export class SetInitialDistributionFinishedCall__Outputs {
  _call: SetInitialDistributionFinishedCall;

  constructor(call: SetInitialDistributionFinishedCall) {
    this._call = call;
  }
}

export class SetLPCall extends ethereum.Call {
  get inputs(): SetLPCall__Inputs {
    return new SetLPCall__Inputs(this);
  }

  get outputs(): SetLPCall__Outputs {
    return new SetLPCall__Outputs(this);
  }
}

export class SetLPCall__Inputs {
  _call: SetLPCall;

  constructor(call: SetLPCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLPCall__Outputs {
  _call: SetLPCall;

  constructor(call: SetLPCall) {
    this._call = call;
  }
}

export class SetSwapBackSettingsCall extends ethereum.Call {
  get inputs(): SetSwapBackSettingsCall__Inputs {
    return new SetSwapBackSettingsCall__Inputs(this);
  }

  get outputs(): SetSwapBackSettingsCall__Outputs {
    return new SetSwapBackSettingsCall__Outputs(this);
  }
}

export class SetSwapBackSettingsCall__Inputs {
  _call: SetSwapBackSettingsCall;

  constructor(call: SetSwapBackSettingsCall) {
    this._call = call;
  }

  get _enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _num(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _denom(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetSwapBackSettingsCall__Outputs {
  _call: SetSwapBackSettingsCall;

  constructor(call: SetSwapBackSettingsCall) {
    this._call = call;
  }
}

export class SetTargetLiquidityCall extends ethereum.Call {
  get inputs(): SetTargetLiquidityCall__Inputs {
    return new SetTargetLiquidityCall__Inputs(this);
  }

  get outputs(): SetTargetLiquidityCall__Outputs {
    return new SetTargetLiquidityCall__Outputs(this);
  }
}

export class SetTargetLiquidityCall__Inputs {
  _call: SetTargetLiquidityCall;

  constructor(call: SetTargetLiquidityCall) {
    this._call = call;
  }

  get target(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get accuracy(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTargetLiquidityCall__Outputs {
  _call: SetTargetLiquidityCall;

  constructor(call: SetTargetLiquidityCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateBlacklistCall extends ethereum.Call {
  get inputs(): UpdateBlacklistCall__Inputs {
    return new UpdateBlacklistCall__Inputs(this);
  }

  get outputs(): UpdateBlacklistCall__Outputs {
    return new UpdateBlacklistCall__Outputs(this);
  }
}

export class UpdateBlacklistCall__Inputs {
  _call: UpdateBlacklistCall;

  constructor(call: UpdateBlacklistCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _flag(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UpdateBlacklistCall__Outputs {
  _call: UpdateBlacklistCall;

  constructor(call: UpdateBlacklistCall) {
    this._call = call;
  }
}
